
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace cfg
{
public sealed partial class BattleBuffConfig : Luban.BeanBase
{
    public BattleBuffConfig(JSONNode _buf) 
    {
        { if(!_buf["id"].IsNumber) { throw new SerializationException(); }  Id = (BattleBuffEnum)_buf["id"].AsInt; }
        { if(!_buf["desc"].IsString) { throw new SerializationException(); }  Desc = _buf["desc"]; }
        { if(!_buf["remove_when_round_end"].IsBoolean) { throw new SerializationException(); }  RemoveWhenRoundEnd = _buf["remove_when_round_end"]; }
        { if(!_buf["is_env_buff"].IsBoolean) { throw new SerializationException(); }  IsEnvBuff = _buf["is_env_buff"]; }
        { if(!_buf["can_stack"].IsBoolean) { throw new SerializationException(); }  CanStack = _buf["can_stack"]; }
        { if(!_buf["remove_all_when_round_end"].IsBoolean) { throw new SerializationException(); }  RemoveAllWhenRoundEnd = _buf["remove_all_when_round_end"]; }
    }

    public static BattleBuffConfig DeserializeBattleBuffConfig(JSONNode _buf)
    {
        return new BattleBuffConfig(_buf);
    }

    /// <summary>
    /// id
    /// </summary>
    public readonly BattleBuffEnum Id;
    public readonly string Desc;
    /// <summary>
    /// 是否回合结束时消失
    /// </summary>
    public readonly bool RemoveWhenRoundEnd;
    /// <summary>
    /// 是否是场地buff
    /// </summary>
    public readonly bool IsEnvBuff;
    /// <summary>
    /// 是否可以叠加
    /// </summary>
    public readonly bool CanStack;
    /// <summary>
    /// (只有是场地buff时生效)回合结束时是否移除所有
    /// </summary>
    public readonly bool RemoveAllWhenRoundEnd;
   
    public const int __ID__ = 1259790445;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
        
        
        
        
        
        
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + Id + ","
        + "desc:" + Desc + ","
        + "removeWhenRoundEnd:" + RemoveWhenRoundEnd + ","
        + "isEnvBuff:" + IsEnvBuff + ","
        + "canStack:" + CanStack + ","
        + "removeAllWhenRoundEnd:" + RemoveAllWhenRoundEnd + ","
        + "}";
    }
}

}

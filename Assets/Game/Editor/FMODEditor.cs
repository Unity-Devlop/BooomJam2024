using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using FMODUnity;
using UnityEditor;
using UnityEngine;

namespace Game.Editor
{
    [Serializable]
    public sealed class FMODEditor : AssetPostprocessor
    {
        private const string EventPrefix = "event:/";
        private const string SnapshotPrefix = "snapshot:/";

        private static bool _generating = false;

        private void OnPreprocessAsset()
        {
            // .bytes
            if (assetPath.EndsWith(".bytes") && assetPath.StartsWith("Assets/Resouce/FMODBanks"))
            {
                // 生成事件常量类
                GenerateEventConstClass();
            }
        }


        [Sirenix.OdinInspector.Button("GenerateEventConstClass")]
        private async void GenerateEventConstClass()
        {
            if (_generating)
            {
                return;
            }

            var all = GetAllEventRef();
            _generating = true;
            await GenerateEventConstClassAsync(all);
            _generating = false;
            AssetDatabase.Refresh();
        }


        private Task GenerateEventConstClassAsync(List<EditorEventRef> eventRefs)
        {
            string targetPath = "Assets/Game/Global/AudioSystem/FMODName.cs";
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("/*Auto-generated by FMODEditor*/");
            sb.AppendLine("namespace Game");
            sb.AppendLine("{");
            sb.AppendLine("    public static class FMODName");
            sb.AppendLine("    {");
            // #region Event
            sb.AppendLine("        public static class Event");
            sb.AppendLine("        {");
            foreach (var eventRef in eventRefs)
            {
                if (!eventRef.Path.StartsWith(EventPrefix))
                {
                    continue;
                }

                // 移除前缀
                string eventName = eventRef.Path.Substring(EventPrefix.Length);
                eventName = ProcessString(eventName);
                sb.AppendLine($"        \tpublic const string {eventName} = \"{eventRef.Path}\";");
                foreach (var eventRefParameter in eventRef.Parameters)
                {
                    string eventRefParameterName = ProcessString($"{eventName}_{eventRefParameter.Name}");
                    sb.AppendLine(
                        $"        \tpublic const string {eventRefParameterName} = \"{eventRefParameter.Name}\";");
                }
            }

            sb.AppendLine("        }");
            // #endregion
            // #region Snapshot
            sb.AppendLine("        public static class Snapshot");
            sb.AppendLine("        {");
            foreach (var eventRef in eventRefs)
            {
                if (!eventRef.Path.StartsWith(SnapshotPrefix))
                {
                    continue;
                }

                // 移除前缀
                string snapshotName = eventRef.Path.Substring(SnapshotPrefix.Length);
                snapshotName = ProcessString(snapshotName);
                sb.AppendLine($"        \tpublic const string {snapshotName} = \"{eventRef.Path}\";");
            }

            sb.AppendLine("        }");
            // #endregion
            // #region Bank
            sb.AppendLine("        public static class Bank");
            sb.AppendLine("        {");
            foreach (var editorBankRef in EventManager.Banks)
            {
                string bankName = ProcessString(editorBankRef.Name);
                sb.AppendLine($"        \tpublic const string {bankName} = \"{editorBankRef.StudioPath}\";");
            }

            sb.AppendLine("        }");
            // #endregion
            // #region Parameter
            sb.AppendLine("        public static class GlobalParameter");
            sb.AppendLine("        {");
            foreach (var editorParamRef in EventManager.Parameters)
            {
                string name= ProcessString(editorParamRef.Name);
                sb.AppendLine(
                    $"        \tpublic const string {name} = \"{editorParamRef.StudioPath}\";");
            }

            sb.AppendLine("        }");
            // #endregion

            sb.AppendLine("    }");
            sb.AppendLine("}");

            return System.IO.File.WriteAllTextAsync(targetPath, sb.ToString());
        }

        private static string ProcessString(string str)
        {
            // 非数字 字母 下划线 替换为_
            return System.Text.RegularExpressions.Regex.Replace(str, @"[^\w\d_]", "_");
        }

        private List<EditorEventRef> GetAllEventRef()
        {
            List<EditorEventRef> refs = new List<EditorEventRef>();
            var start = EventManager.Events.GetEnumerator();
            var current = start.Current;
            refs.Add(current);
            while (start.MoveNext())
            {
                current = start.Current;
                refs.Add(current);
            }

            refs.RemoveAll(r => r == null);


            return refs;
        }
    }
}